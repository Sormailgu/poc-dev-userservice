// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FinancialService.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    #pragma warning disable CS1591
    public partial class AccountBalanceResponseDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accountId property</summary>
        public Guid? AccountId { get; set; }
        /// <summary>The balance property</summary>
        public double? Balance { get; set; }
        /// <summary>The lastUpdated property</summary>
        public DateTimeOffset? LastUpdated { get; set; }
        /// <summary>The userId property</summary>
        public int? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FinancialService.Client.Models.AccountBalanceResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FinancialService.Client.Models.AccountBalanceResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FinancialService.Client.Models.AccountBalanceResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetGuidValue(); } },
                { "balance", n => { Balance = n.GetDoubleValue(); } },
                { "lastUpdated", n => { LastUpdated = n.GetDateTimeOffsetValue(); } },
                { "userId", n => { UserId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("accountId", AccountId);
            writer.WriteDoubleValue("balance", Balance);
            writer.WriteDateTimeOffsetValue("lastUpdated", LastUpdated);
            writer.WriteIntValue("userId", UserId);
        }
    }
}
#pragma warning restore CS0618
